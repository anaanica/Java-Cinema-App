/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.ActorRepository;
import hr.algebra.dal.DirectorRepository;
import hr.algebra.dal.GenreRepository;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.ActorAddable;
import hr.algebra.model.Director;
import hr.algebra.model.DirectorAddable;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author ana
 */
public class EditMoviesPanel extends javax.swing.JPanel implements ActorAddable, DirectorAddable {

    private final DefaultListModel<Actor> actorModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genreModel = new DefaultListModel<>();

    private final List<Movie> moviesXML = new ArrayList<>();

    private List<Director> allDirectors;
    private List<Actor> allActors;
    private List<Genre> allGenres;

    private final Set<Actor> allActorsSet = new TreeSet<>();
    private final Set<Director> allDirectorsSet = new TreeSet<>();

    private final List<Director> directorsRelatedToMovie = new ArrayList<>();
    private final List<Actor> actorsRelatedToMovie = new ArrayList<>();
    private final List<Genre> genresRelatedToMovie = new ArrayList<>();

    private List<Director> selectedDirectors;
    private List<Actor> selectedActors;
    private List<Genre> selectedGenres;

    public static final String DIR = "assets";
    private static final String EXT = ".jpg";

    private MovieTableModel tableModel;
    private Movie selectedMovie;

    private static final String FILENAME = "src/main/resources/moviearchive.xml";

    private ActorRepository actorRepository;
    private DirectorRepository directorRepository;
    private GenreRepository genreRepository;
    private MovieRepository movieRepository;

    private final Map<JTextComponent, JLabel> validationFields = new HashMap<>();
    private final Map<DefaultListModel, JLabel> validationLists = new HashMap<>();

    /**
     * Creates new form EditMoviesPanel
     */
    public EditMoviesPanel() {
        initComponents();
        lbPoster.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfPosterPath = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tfExpectedDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbPoster = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnChoose = new javax.swing.JButton();
        btnSaveXML = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lbOriginalTitleError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbExpectedDateError = new javax.swing.JLabel();
        lbPublishedDateError = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbPosterPathError = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        cbGenres = new javax.swing.JComboBox<>();
        cbDirectors = new javax.swing.JComboBox<>();
        cbActors = new javax.swing.JComboBox<>();
        btnDirectorRemove = new javax.swing.JButton();
        btnDirectorAdd = new javax.swing.JButton();
        btnDirectorNew = new javax.swing.JButton();
        btnActorRemove = new javax.swing.JButton();
        btnActorAdd = new javax.swing.JButton();
        btnActorNew = new javax.swing.JButton();
        btnGenreRemove = new javax.swing.JButton();
        btnGenreAdd = new javax.swing.JButton();
        lbDirectorsError = new javax.swing.JLabel();
        lbGenreError = new javax.swing.JLabel();
        lbActorsError = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel6.setText("Description");

        jLabel7.setText("Link");
        jLabel7.setToolTipText("");

        jLabel8.setText("Poster Path");
        jLabel8.setToolTipText("");

        jLabel9.setText("Actors");
        jLabel9.setToolTipText("");

        jScrollPane3.setViewportView(lsDirectors);

        jLabel10.setText("Directors");
        jLabel10.setToolTipText("");

        jScrollPane4.setViewportView(lsActors);

        jScrollPane5.setViewportView(lsGenres);

        jLabel11.setText("Genres");
        jLabel11.setToolTipText("");

        jLabel12.setText("Published Date (yyyy-dd-MMThh:mm:ss)");
        jLabel12.setToolTipText("");

        tfPublishedDate.setName("PublishedDate"); // NOI18N

        jLabel13.setText(" Expected Date (yyyy-dd-MM)");
        jLabel13.setToolTipText("");

        tfExpectedDate.setName("ExpectedDate"); // NOI18N

        jLabel1.setText("Title");
        jLabel1.setToolTipText("");

        jLabel2.setText("Original Title");
        jLabel2.setToolTipText("");

        jLabel5.setText("Duration ");
        jLabel5.setToolTipText("");

        lbPoster.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N
        lbPoster.setAlignmentY(0.0F);
        lbPoster.setPreferredSize(new java.awt.Dimension(210, 400));
        lbPoster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnDelete.setBackground(new java.awt.Color(255, 51, 0));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 102, 0));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        btnSaveXML.setText("XML");
        btnSaveXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveXMLActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        lbOriginalTitleError.setForeground(new java.awt.Color(255, 51, 0));
        lbOriginalTitleError.setText("X");

        lbDurationError.setForeground(new java.awt.Color(255, 51, 0));
        lbDurationError.setText("X");

        lbExpectedDateError.setForeground(new java.awt.Color(255, 51, 0));
        lbExpectedDateError.setText("X");

        lbPublishedDateError.setForeground(new java.awt.Color(255, 51, 0));
        lbPublishedDateError.setText("X");

        lbTitleError.setForeground(new java.awt.Color(255, 51, 0));
        lbTitleError.setText("X");

        lbPosterPathError.setForeground(new java.awt.Color(255, 51, 0));
        lbPosterPathError.setText("X");

        lbDescriptionError.setForeground(new java.awt.Color(255, 51, 0));
        lbDescriptionError.setText("X");

        lbLinkError.setForeground(new java.awt.Color(255, 51, 0));
        lbLinkError.setText("X");

        btnDirectorRemove.setText("Remove");
        btnDirectorRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorRemoveActionPerformed(evt);
            }
        });

        btnDirectorAdd.setText("Add");
        btnDirectorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorAddActionPerformed(evt);
            }
        });

        btnDirectorNew.setText("New");
        btnDirectorNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorNewActionPerformed(evt);
            }
        });

        btnActorRemove.setText("Remove");
        btnActorRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorRemoveActionPerformed(evt);
            }
        });

        btnActorAdd.setText("Add");
        btnActorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorAddActionPerformed(evt);
            }
        });

        btnActorNew.setText("New");
        btnActorNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorNewActionPerformed(evt);
            }
        });

        btnGenreRemove.setText("Remove");
        btnGenreRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenreRemoveActionPerformed(evt);
            }
        });

        btnGenreAdd.setText("Add");
        btnGenreAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenreAddActionPerformed(evt);
            }
        });

        lbDirectorsError.setForeground(new java.awt.Color(255, 51, 0));
        lbDirectorsError.setText("X");

        lbGenreError.setForeground(new java.awt.Color(255, 51, 0));
        lbGenreError.setText("X");

        lbActorsError.setForeground(new java.awt.Color(255, 51, 0));
        lbActorsError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(640, 640, 640)
                        .addComponent(btnChoose))
                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(lbPosterPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(20, 20, 20)
                                .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDirectorRemove)
                                        .addGap(8, 8, 8)
                                        .addComponent(btnDirectorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnDirectorNew, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnActorRemove)
                                        .addGap(8, 8, 8)
                                        .addComponent(btnActorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnGenreRemove)
                                        .addGap(8, 8, 8)
                                        .addComponent(btnGenreAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnActorNew, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(81, 81, 81)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(tfExpectedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, 0)
                                                .addComponent(lbExpectedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(110, 110, 110)
                                        .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnRefresh)
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnSaveXML))))))))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(lbPublishedDateError))
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(lbDescriptionError))
                                .addGap(114, 114, 114)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(lbActorsError)
                                    .addComponent(jLabel11)
                                    .addComponent(lbGenreError))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnDirectorRemove)
                                            .addComponent(btnActorRemove)
                                            .addComponent(btnActorAdd)
                                            .addComponent(btnGenreRemove)
                                            .addComponent(btnGenreAdd))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnDirectorNew)
                                            .addComponent(btnActorNew)))
                                    .addComponent(btnDirectorAdd)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(280, 280, 280)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(280, 280, 280)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(lbDirectorsError))))
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUpdate)
                                    .addComponent(btnDelete)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(btnChoose))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(lbPosterPathError))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(84, 84, 84)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTitleError)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbOriginalTitleError)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnRefresh)
                                .addComponent(btnSaveXML))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel13)
                                .addComponent(lbExpectedDateError)))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDurationError)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfExpectedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbLinkError)
                                    .addComponent(jLabel7))))
                        .addGap(6, 6, 6)
                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        init();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveXMLActionPerformed
        try {

            for (int i = 0; i < tableModel.getRowCount(); i++) {
                int id = (int) tableModel.getValueAt(i, 0);
                try {
                    Optional<Movie> optionalMovie = movieRepository.selectMovie(id);
                    selectedDirectors = directorRepository.selectDirectors(id);
                    selectedActors = actorRepository.selectActors(id);
                    selectedGenres = genreRepository.selectGenres(id);

                    Movie m = new Movie(
                            id,
                            optionalMovie.get().getTitle(),
                            optionalMovie.get().getPublishedDate(),
                            optionalMovie.get().getDescription(),
                            optionalMovie.get().getOriginalTitle(),
                            selectedDirectors,
                            selectedActors,
                            optionalMovie.get().getDuration(),
                            selectedGenres,
                            optionalMovie.get().getPosterPath(),
                            optionalMovie.get().getLink(),
                            optionalMovie.get().getExpectedDate());

                    moviesXML.add(m);

                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JAXBUtils.save(new MovieArchive(moviesXML), FILENAME);
            MessageUtils.showInformationMessage("Info", "Movies saved");
        } catch (JAXBException ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveXMLActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            if (selectedMovie != null) {
                if (MessageUtils.showConfirmDialog("Deletion", "Delete movie?")) {
                    movieRepository.deleteMovie(selectedMovie.getId());
                }
            }
            clearForm();
            init();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDirectorRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorRemoveActionPerformed
        Director d = lsDirectors.getSelectedValue();
        if (d != null) {
            directorModel.removeElement(d);
        }
        lsDirectors.setModel(directorModel);
        refreshDirectorsRelatedToMovie();
    }//GEN-LAST:event_btnDirectorRemoveActionPerformed

    private void btnDirectorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorAddActionPerformed
        Director d = (Director) cbDirectors.getSelectedItem();
        directorModel.addElement(d);
        lsDirectors.setModel(directorModel);
        refreshDirectorsRelatedToMovie();
    }//GEN-LAST:event_btnDirectorAddActionPerformed

    private void btnDirectorNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorNewActionPerformed
        new DirectorDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnDirectorNewActionPerformed

    private void btnActorRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorRemoveActionPerformed
        Actor a = lsActors.getSelectedValue();
        if (a != null) {
            actorModel.removeElement(a);
        }
        lsActors.setModel(actorModel);
        refreshActorsRelatedToMovie();
    }//GEN-LAST:event_btnActorRemoveActionPerformed

    private void btnActorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorAddActionPerformed
        Actor a = (Actor) cbActors.getSelectedItem();
        actorModel.addElement(a);
        lsActors.setModel(actorModel);
        refreshActorsRelatedToMovie();
    }//GEN-LAST:event_btnActorAddActionPerformed

    private void btnActorNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorNewActionPerformed
        new ActorDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnActorNewActionPerformed

    private void btnGenreRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenreRemoveActionPerformed
        Genre g = lsGenres.getSelectedValue();
        if (g != null) {
            genreModel.removeElement(g);
        }
        lsGenres.setModel(genreModel);
        refreshGenresRelatedToMovie();
    }//GEN-LAST:event_btnGenreRemoveActionPerformed

    private void btnGenreAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenreAddActionPerformed
        Genre g = (Genre) cbGenres.getSelectedItem();
        genreModel.addElement(g);
        lsGenres.setModel(genreModel);
        refreshGenresRelatedToMovie();
    }//GEN-LAST:event_btnGenreAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (formValid()) {
            Movie m = new Movie();
            m.setTitle(tfTitle.getText().trim());
            m.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER));
            m.setDescription(taDescription.getText().trim());
            m.setOriginalTitle(tfOriginalTitle.getText().trim());
            m.setDuration(tfDuration.getText().trim());
            try {
                m.setPosterPath(copyImageToAssets(m, tfPosterPath.getText().trim()));
            } catch (IOException ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            m.setLink(tfLink.getText().trim());
            m.setExpectedDate(LocalDate.parse(tfExpectedDate.getText().trim(), Movie.DATE_FORMAT));

            try {
                movieRepository.updateMovie(selectedMovie.getId(), m);
                movieRepository.removeMovieActors(selectedMovie.getId());
                movieRepository.removeMovieDirectors(selectedMovie.getId());
                movieRepository.removeMovieGenres(selectedMovie.getId());
                refreshActorsRelatedToMovie();
                refreshDirectorsRelatedToMovie();
                refreshGenresRelatedToMovie();

                for (Director director : directorsRelatedToMovie) {
                    Optional<Director> d = directorRepository.selectDirector(director);
                    if (d.isPresent()) {
                        int idDirector = director.getIdDirector();
                        movieRepository.setMovieDirectors(selectedMovie.getId(), idDirector);
                    } else {
                        directorRepository.createDirector(selectedMovie.getId(), director);
                    }
                }

                for (Actor actor : actorsRelatedToMovie) {
                    Optional<Actor> a = actorRepository.selectActorName(actor);
                    if (a.isPresent()) {
                        int idActor = actor.getIdActor();
                        movieRepository.setMovieActors(selectedMovie.getId(), idActor);
                    } else {
                        actorRepository.createActor(selectedMovie.getId(), actor);
                    }
                }

                for (Genre genre : genresRelatedToMovie) {
                    Optional<Genre> g = genreRepository.selectGenre(genre);
                    if (g.isPresent()) {
                        int idGenre = genre.getIdGenre();
                        movieRepository.setMovieGenres(selectedMovie.getId(), idGenre);
                    } else {
                        genreRepository.createGenre(selectedMovie.getId(), genre);
                    }
                }

                MessageUtils.showInformationMessage("Success", "Movie updated successfully");

            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> optionalFile = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (optionalFile.isEmpty()) {
            return;
        }
        if (optionalFile.isPresent()) {
            File file = optionalFile.get();
            tfPosterPath.setText(file.getAbsolutePath());
            setIcon(lbPoster, file);
        }
    }//GEN-LAST:event_btnChooseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorAdd;
    private javax.swing.JButton btnActorNew;
    private javax.swing.JButton btnActorRemove;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDirectorAdd;
    private javax.swing.JButton btnDirectorNew;
    private javax.swing.JButton btnDirectorRemove;
    private javax.swing.JButton btnGenreAdd;
    private javax.swing.JButton btnGenreRemove;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSaveXML;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Actor> cbActors;
    private javax.swing.JComboBox<Director> cbDirectors;
    private javax.swing.JComboBox<Genre> cbGenres;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirectorsError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbExpectedDateError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPoster;
    private javax.swing.JLabel lbPosterPathError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Actor> lsActors;
    private javax.swing.JList<Director> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfExpectedDate;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPosterPath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) tableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optional = movieRepository.selectMovie(selectedMovieId);
            selectedActors = actorRepository.selectActors(selectedMovieId);
            selectedDirectors = directorRepository.selectDirectors(selectedMovieId);
            selectedGenres = genreRepository.selectGenres(selectedMovieId);
            if (optional.isPresent()) {
                selectedMovie = optional.get();
                fillForm(selectedMovie);
            }
            if (!selectedDirectors.isEmpty()) {
                selectedDirectors.forEach(directorModel::addElement);
                lsDirectors.setModel(directorModel);
            }
            if (!selectedActors.isEmpty()) {
                selectedActors.forEach(actorModel::addElement);
                lsActors.setModel(actorModel);
            }
            if (!selectedGenres.isEmpty()) {
                selectedGenres.forEach(genreModel::addElement);
                lsGenres.setModel(genreModel);
            }

        } catch (Exception ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show Movie!");
        }
    }

    private void init() {
        try {
            initValidation();
            hideErrors();
            initRepository();
            initTable();
            initActors();
            initDirectors();
            initGenres();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load form");
            System.exit(1);
        }
    }

    private void initValidation() {

        validationFields.put(tfTitle, lbTitleError);
        validationFields.put(tfOriginalTitle, lbOriginalTitleError);
        validationFields.put(tfDuration, lbDurationError);
        validationFields.put(tfLink, lbLinkError);
        validationFields.put(tfPosterPath, lbPosterPathError);
        validationFields.put(tfPublishedDate, lbPublishedDateError);
        validationFields.put(tfExpectedDate, lbExpectedDateError);
        validationFields.put(taDescription, lbDescriptionError);
        validationLists.put(genreModel, lbGenreError);
        validationLists.put(directorModel, lbDirectorsError);
        validationLists.put(actorModel, lbActorsError);
    }

    private void initRepository() throws Exception {
        actorRepository = RepositoryFactory.getActorRepository();
        directorRepository = RepositoryFactory.getDirectorRepository();
        genreRepository = RepositoryFactory.getGenreRepository();
        movieRepository = RepositoryFactory.getMovieRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        tableModel = new MovieTableModel(movieRepository.selectMovies());
        tbMovies.setModel(tableModel);
    }

    private void initActors() throws Exception {
        cbActors.removeAllItems();
        allActors = actorRepository.selectAllActors();
        allActorsSet.addAll(allActors);
        for (Actor actor : allActors) {
            cbActors.addItem(new Actor(actor.getIdActor(), actor.getActorName()));
        }
    }

    private void initDirectors() throws Exception {
        cbDirectors.removeAllItems();
        allDirectors = directorRepository.selectAllDirectors();
        allDirectorsSet.addAll(allDirectors);
        for (Director d : allDirectors) {
            cbDirectors.addItem(new Director(d.getIdDirector(), d.getDirectorName()));
        }
    }

    private void initGenres() throws Exception {
        allGenres = genreRepository.selectAllGenres();
        for (Genre g : allGenres) {
            cbGenres.addItem(new Genre(g.getIdGenre(), g.getGenreName()));
        }
    }

    private void hideErrors() {
        for (Map.Entry<JTextComponent, JLabel> entry : validationFields.entrySet()) {
            JLabel errorLabel = entry.getValue();
            errorLabel.setVisible(false);
        }
        for (Map.Entry<DefaultListModel, JLabel> entry : validationLists.entrySet()) {
            JLabel errorLabel = entry.getValue();
            errorLabel.setVisible(false);
        }
    }

    private void clearForm() {
        hideErrors();
        clearTextFields();
        directorModel.clear();
        actorModel.clear();
        genreModel.clear();
        lbPoster.setIcon(new ImageIcon(getClass().getResource("/assets/no_image.png")));
        selectedMovie = null;
    }

    private void clearTextFields() {
        for (Map.Entry<JTextComponent, JLabel> entry : validationFields.entrySet()) {
            JTextComponent textField = entry.getKey();
            textField.setText("");
        }
    }

    private void fillForm(Movie selectedMovie) {
        if (selectedMovie.getPosterPath() != null && Files.exists(Paths.get(selectedMovie.getPosterPath()))) {
            setIcon(lbPoster, new File(selectedMovie.getPosterPath()));
        }
        tfTitle.setText(selectedMovie.getTitle());
        tfOriginalTitle.setText(selectedMovie.getOriginalTitle());
        tfDuration.setText(selectedMovie.getDuration());
        tfLink.setText(selectedMovie.getLink());
        tfPosterPath.setText(selectedMovie.getPosterPath());
        tfLink.setText(selectedMovie.getLink());
        tfPublishedDate.setText(selectedMovie.getPublishedDate().format(Movie.DATE_FORMATTER));
        tfExpectedDate.setText(selectedMovie.getExpectedDate().format(Movie.DATE_FORMAT));
        taDescription.setText(selectedMovie.getDescription());
    }

    private void setIcon(JLabel lbPoster, File file) {
        try {
            lbPoster.setIcon(IconUtils.createIcon(file, lbPoster.getWidth(), lbPoster.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private void refreshDirectorsRelatedToMovie() {
        directorsRelatedToMovie.clear();
        for (int i = 0; i < lsDirectors.getModel().getSize(); i++) {
            directorsRelatedToMovie.add(lsDirectors.getModel().getElementAt(i));
        }
    }

    private void refreshActorsRelatedToMovie() {
        actorsRelatedToMovie.clear();
        for (int i = 0; i < lsActors.getModel().getSize(); i++) {
            actorsRelatedToMovie.add(lsActors.getModel().getElementAt(i));
        }
    }

    private void refreshGenresRelatedToMovie() {
        genresRelatedToMovie.clear();
        for (int i = 0; i < lsGenres.getModel().getSize(); i++) {
            genresRelatedToMovie.add(lsGenres.getModel().getElementAt(i));
        }
    }

    private boolean formValid() {
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> entry : validationFields.entrySet()) {
            JTextComponent textField = entry.getKey();
            JLabel errorLabel = entry.getValue();

            String text = textField.getText().trim();
            boolean isValid = !text.isEmpty();

            if ("PublishedDate".equals(textField.getName())) {
                try {
                    LocalDateTime.parse(text, Movie.DATE_FORMATTER);
                    isValid = true;
                } catch (Exception e) {
                    isValid = false;
                }
            }

            if ("ExpectedDate".equals(textField.getName())) {
                try {
                    LocalDate.parse(text, Movie.DATE_FORMAT);
                    isValid = true;
                } catch (Exception e) {
                    isValid = false;
                }
            }

            ok &= isValid;
            errorLabel.setVisible(!isValid);
        }
        for (Map.Entry<DefaultListModel, JLabel> entry : validationLists.entrySet()) {
            DefaultListModel list = entry.getKey();
            JLabel errorLabel = entry.getValue();
            boolean isValid = !list.isEmpty();
            ok &= isValid;
            errorLabel.setVisible(!isValid);
        }

        return ok;
    }

    private String copyImageToAssets(Movie m, String pictureUrl) throws IOException {
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));
        if (ext.length() > 4) {
            ext = EXT;
        }
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(pictureUrl, localPicturePath);
        m.setPosterPath(localPicturePath);
        return localPicturePath;
    }

    @Override
    public boolean addActor(Actor actor) {
        if (allActorsSet.add(actor)) {
            try {
                actorRepository.createNewActor(actor.getActorName());
                initActors();
            } catch (Exception ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    @Override
    public boolean addDirector(Director director) {
        if (allDirectorsSet.add(director)) {
            try {
                directorRepository.createNewDirector(director.getDirectorName());
                initDirectors();
            } catch (Exception ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    /*
    private String uploadPicture() throws IOException {
        String picturePath = tfPosterPath.getText();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }*/
}
