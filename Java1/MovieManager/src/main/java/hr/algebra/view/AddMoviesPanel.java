/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.ActorRepository;
import hr.algebra.dal.DirectorRepository;
import hr.algebra.dal.GenreRepository;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.ActorAddable;
import hr.algebra.model.ActorTransferable;
import hr.algebra.model.Director;
import hr.algebra.model.DirectorAddable;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author ana
 */
public class AddMoviesPanel extends javax.swing.JPanel implements ActorAddable, DirectorAddable {

    private final DefaultListModel<Actor> actorModel = new DefaultListModel<>();
    private final DefaultListModel<Actor> allActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genreModel = new DefaultListModel<>();

    private final List<Director> directorsRelatedToMovie = new ArrayList<>();
    private final List<Actor> actorsRelatedToMovie = new ArrayList<>();
    private final List<Genre> genresRelatedToMovie = new ArrayList<>();

    private List<Director> allDirectors;
    private List<Actor> allActors;
    private List<Genre> allGenres;

    private Director presentDirector;
    private Actor presentActor;
    private Genre presentGenre;

    private final Set<Actor> actorsToDrop = new TreeSet<>();
    private final Set<Actor> allActorsSet = new TreeSet<>();

    private final Set<Director> allDirectorsSet = new TreeSet<>();

    private static final String EXT = ".jpg";
    private static final String DIR = "assets";

    private ActorRepository actorRepository;
    private DirectorRepository directorRepository;
    private GenreRepository genreRepository;
    private MovieRepository movieRepository;

    private final Map<JTextComponent, JLabel> validationFields = new HashMap<>();
    private final Map<DefaultListModel, JLabel> validationLists = new HashMap<>();

    /**
     * Creates new form ArchiveMoviesPanel
     */
    public AddMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfPublishedDate = new javax.swing.JTextField();
        lbPublishedDateError = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        tfExpectedDate = new javax.swing.JTextField();
        lbPosterPathError = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbDirectorsError = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbLinkError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbPoster = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        tfPosterPath = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        btnChoose = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        lbOriginalTitleError = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lbExpectedDateError = new javax.swing.JLabel();
        cbDirectors = new javax.swing.JComboBox<>();
        cbGenres = new javax.swing.JComboBox<>();
        btnGenreAdd = new javax.swing.JButton();
        btnGenreRemove = new javax.swing.JButton();
        btnDirectorAdd = new javax.swing.JButton();
        btnDirectorRemove = new javax.swing.JButton();
        btnDirectorAddNew = new javax.swing.JButton();
        btnActorRemove = new javax.swing.JButton();
        btnActorAddNew = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        btnActorUpdate = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        tfActor = new javax.swing.JTextField();
        lbActorsError = new javax.swing.JLabel();
        lbGenreError = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tfPublishedDate.setName("PublishedDate"); // NOI18N

        lbPublishedDateError.setForeground(new java.awt.Color(255, 51, 0));
        lbPublishedDateError.setText("X");

        jLabel13.setText(" Expected Date (yyyy-dd-MM)");
        jLabel13.setToolTipText("");

        lbTitleError.setForeground(new java.awt.Color(255, 51, 0));
        lbTitleError.setText("X");

        tfExpectedDate.setName("ExpectedDate"); // NOI18N

        lbPosterPathError.setForeground(new java.awt.Color(255, 51, 0));
        lbPosterPathError.setText("X");

        jLabel1.setText("Title");
        jLabel1.setToolTipText("");

        lbDirectorsError.setForeground(new java.awt.Color(255, 51, 0));
        lbDirectorsError.setText("X");

        lbLinkError.setForeground(new java.awt.Color(255, 51, 0));
        lbLinkError.setText("X");

        jLabel2.setText("Original Title");
        jLabel2.setToolTipText("");

        jLabel5.setText("Duration ");
        jLabel5.setToolTipText("");

        lbPoster.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N
        lbPoster.setAlignmentY(0.0F);
        lbPoster.setPreferredSize(new java.awt.Dimension(210, 400));
        lbPoster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel8.setText("Poster Path");
        jLabel8.setToolTipText("");

        btnAdd.setBackground(new java.awt.Color(255, 102, 102));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel9.setText("Actors");
        jLabel9.setToolTipText("");

        jScrollPane3.setViewportView(lsDirectors);

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        jLabel10.setText("Directors");
        jLabel10.setToolTipText("");

        jScrollPane4.setViewportView(lsActors);

        lbOriginalTitleError.setForeground(new java.awt.Color(255, 51, 0));
        lbOriginalTitleError.setText("X");

        jScrollPane5.setViewportView(lsGenres);

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel6.setText("Description");

        jLabel7.setText("Link");
        jLabel7.setToolTipText("");

        jLabel11.setText("Genres");
        jLabel11.setToolTipText("");

        lbDurationError.setForeground(new java.awt.Color(255, 51, 0));
        lbDurationError.setText("X");

        jLabel12.setText("Published Date (yyyy-dd-MMThh:mm:ss)");
        jLabel12.setToolTipText("");

        lbExpectedDateError.setForeground(new java.awt.Color(255, 51, 0));
        lbExpectedDateError.setText("X");

        btnGenreAdd.setText("Add");
        btnGenreAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenreAddActionPerformed(evt);
            }
        });

        btnGenreRemove.setText("Remove");
        btnGenreRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenreRemoveActionPerformed(evt);
            }
        });

        btnDirectorAdd.setText("Add");
        btnDirectorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorAddActionPerformed(evt);
            }
        });

        btnDirectorRemove.setText("Remove");
        btnDirectorRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorRemoveActionPerformed(evt);
            }
        });

        btnDirectorAddNew.setText("New");
        btnDirectorAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorAddNewActionPerformed(evt);
            }
        });

        btnActorRemove.setText("Remove");
        btnActorRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorRemoveActionPerformed(evt);
            }
        });

        btnActorAddNew.setText("New");
        btnActorAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorAddNewActionPerformed(evt);
            }
        });

        lsAllActors.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lsAllActorsValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(lsAllActors);

        jLabel14.setText("All Actors");
        jLabel14.setToolTipText("");

        btnActorUpdate.setText("Update");
        btnActorUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorUpdateActionPerformed(evt);
            }
        });

        btnDeleteActor.setText("Delete");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        lbActorsError.setForeground(new java.awt.Color(255, 51, 0));
        lbActorsError.setText("X");

        lbGenreError.setForeground(new java.awt.Color(255, 51, 0));
        lbGenreError.setText("X");

        lbDescriptionError.setForeground(new java.awt.Color(255, 51, 0));
        lbDescriptionError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(320, 320, 320)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lbExpectedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(tfExpectedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lbPosterPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(548, 548, 548)
                        .addComponent(btnChoose))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(102, 102, 102)
                                .addComponent(jLabel10)
                                .addGap(4, 4, 4)
                                .addComponent(lbDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGenreAdd)
                                .addGap(8, 8, 8)
                                .addComponent(btnGenreRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDirectorAdd)
                                        .addGap(8, 8, 8)
                                        .addComponent(btnDirectorRemove))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDirectorAddNew)
                                        .addGap(80, 80, 80)))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(btnActorAddNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActorRemove))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnActorUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteActor))
                            .addComponent(tfActor, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(tfOriginalTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(lbLinkError)
                            .addComponent(jLabel13)
                            .addComponent(lbExpectedDateError)
                            .addComponent(jLabel5)
                            .addComponent(lbDurationError))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfExpectedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(lbPublishedDateError)
                            .addComponent(jLabel8)
                            .addComponent(lbPosterPathError))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnChoose)
                                .addComponent(lbDescriptionError)))
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel11)
                                        .addComponent(lbGenreError))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel10)
                                        .addComponent(lbDirectorsError))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(lbActorsError)))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(14, 14, 14)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(tfActor)))
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnGenreAdd)
                                                    .addComponent(btnGenreRemove)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(btnActorRemove)
                                                        .addComponent(btnActorAddNew)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(btnActorUpdate)
                                                    .addComponent(btnDeleteActor)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnDirectorAdd)
                                                    .addComponent(btnDirectorRemove))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnDirectorAddNew))))))
                            .addComponent(jLabel14)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lbTitleError))
                        .addGap(4, 4, 4)
                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lbOriginalTitleError))
                        .addGap(4, 4, 4)
                        .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnGenreAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenreAddActionPerformed
        Genre g = (Genre) cbGenres.getSelectedItem();
        genreModel.addElement(g);
        genresRelatedToMovie.add(g);
        lsGenres.setModel(genreModel);
    }//GEN-LAST:event_btnGenreAddActionPerformed

    private void btnGenreRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenreRemoveActionPerformed
        Genre g = lsGenres.getSelectedValue();
        if (g != null) {
            genreModel.removeElement(g);
            genresRelatedToMovie.remove(g);
            lsGenres.setModel(genreModel);
        }
    }//GEN-LAST:event_btnGenreRemoveActionPerformed

    private void btnDirectorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorAddActionPerformed
        Director d = (Director) cbDirectors.getSelectedItem();
        directorModel.addElement(d);
        directorsRelatedToMovie.add(d);
        lsDirectors.setModel(directorModel);
    }//GEN-LAST:event_btnDirectorAddActionPerformed

    private void btnDirectorRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorRemoveActionPerformed
        Director d = lsDirectors.getSelectedValue();
        if (d != null) {
            directorModel.removeElement(d);
            directorsRelatedToMovie.remove(d);
            lsDirectors.setModel(directorModel);
        }
    }//GEN-LAST:event_btnDirectorRemoveActionPerformed

    private void btnDirectorAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorAddNewActionPerformed
        new DirectorDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnDirectorAddNewActionPerformed

    private void btnActorRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorRemoveActionPerformed
        Actor a = lsActors.getSelectedValue();
        if (a != null) {
            actorModel.removeElement(a);
            actorsRelatedToMovie.remove(a);
            actorsToDrop.remove(a);
            lsActors.setModel(actorModel);
        }
    }//GEN-LAST:event_btnActorRemoveActionPerformed

    private void btnActorAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorAddNewActionPerformed
        new ActorDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnActorAddNewActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> optionalFile = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (optionalFile.isEmpty()) {
            return;
        }
        if (optionalFile.isPresent()) {
            File file = optionalFile.get();
            tfPosterPath.setText(file.getAbsolutePath());
            setIcon(lbPoster, file);
        }
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            Movie m = new Movie();
            m.setTitle(tfTitle.getText().trim());
            m.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER));
            m.setDescription(taDescription.getText().trim());
            m.setOriginalTitle(tfOriginalTitle.getText().trim());
            m.setDuration(tfDuration.getText().trim());

            try {
                m.setPosterPath(copyImageToAssets(m, tfPosterPath.getText().trim()));
            } catch (IOException ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            m.setLink(tfLink.getText().trim());
            m.setExpectedDate(LocalDate.parse(tfExpectedDate.getText().trim(), Movie.DATE_FORMAT));
            try {
                int id = movieRepository.createMovie(m);

                for (Director director : directorsRelatedToMovie) {
                    Optional<Director> d = directorRepository.selectDirector(director);
                    if (d.isPresent()) {
                        presentDirector = d.get();
                        movieRepository.setMovieDirectors(id, presentDirector.getIdDirector());
                    } else {
                        directorRepository.createDirector(id, director);
                    }
                }
                for (Actor actor : actorsRelatedToMovie) {
                    Optional<Actor> a = actorRepository.selectActorName(actor);
                    if (a.isPresent()) {
                        presentActor = a.get();
                        movieRepository.setMovieActors(id, presentActor.getIdActor());
                    } else {
                        actorRepository.createActor(id, actor);
                    }
                }
                for (Genre genre : genresRelatedToMovie) {
                    Optional<Genre> g = genreRepository.selectGenre(genre);
                    if (g.isPresent()) {
                        presentGenre = g.get();
                        movieRepository.setMovieGenres(id, presentGenre.getIdGenre());
                    } else {
                        genreRepository.createGenre(id, genre);
                    }
                }

                clearForm();
                actorsToDrop.clear();
                MessageUtils.showInformationMessage("Success", "Movie added successfully");
            } catch (Exception ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void lsAllActorsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lsAllActorsValueChanged

        Actor a = lsAllActors.getSelectedValue();
        if (a == null) {
            allActorsModel.clear();
            lsAllActors.setModel(allActorsModel);
        } else {
            tfActor.setText("");
            tfActor.setText(a.getActorName());
        }
    }//GEN-LAST:event_lsAllActorsValueChanged

    private void btnActorUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorUpdateActionPerformed
        if (!tfActor.getText().trim().isEmpty()) {
            String actorName = tfActor.getText().trim();
            Actor a = lsAllActors.getSelectedValue();
            try {
                if (actorModel.contains(a)) {
                    actorsToDrop.remove(a);
                    actorModel.removeElement(a);
                    actorsRelatedToMovie.remove(a);
                    lsActors.setModel(actorModel);
                    actorRepository.updateActor(a.getIdActor(), actorName);
                    Optional<Actor> optionalActor = actorRepository.selectActor(a.getIdActor());
                    if (optionalActor.isPresent()) {
                        Actor updatedActor = optionalActor.get();
                        actorsToDrop.add(updatedActor);
                        actorModel.addElement(updatedActor);
                        actorsRelatedToMovie.add(updatedActor);
                        lsActors.setModel(actorModel);
                    }
                } else {
                    actorRepository.updateActor(a.getIdActor(), actorName);
                }
                tfActor.setText("");
                initActors();
                MessageUtils.showInformationMessage("Success", "Actor successfully updated");
            } catch (Exception ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            MessageUtils.showInformationMessage("Unable to update", "Please select actor");
        }
    }//GEN-LAST:event_btnActorUpdateActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        Actor a = lsAllActors.getSelectedValue();
        try {
            if (actorRepository.actorMovieRelated(a.getIdActor()) != 0) {
                MessageUtils.showErrorMessage("Deletion failed reason", "Actor is related to a movie");
            } else {
                if (actorModel.contains(a)) {
                    actorsToDrop.remove(a);
                    actorModel.removeElement(a);
                    actorsRelatedToMovie.remove(a);
                    lsActors.setModel(actorModel);
                }
                actorRepository.deleteActor(a.getIdActor());
                tfActor.setText("");
                initActors();
                MessageUtils.showInformationMessage("Success", "Actor successfully deleted");
            }
        } catch (Exception ex) {
            Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorAddNew;
    private javax.swing.JButton btnActorRemove;
    private javax.swing.JButton btnActorUpdate;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDirectorAdd;
    private javax.swing.JButton btnDirectorAddNew;
    private javax.swing.JButton btnDirectorRemove;
    private javax.swing.JButton btnGenreAdd;
    private javax.swing.JButton btnGenreRemove;
    private javax.swing.JComboBox<Director> cbDirectors;
    private javax.swing.JComboBox<Genre> cbGenres;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirectorsError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbExpectedDateError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPoster;
    private javax.swing.JLabel lbPosterPathError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Actor> lsActors;
    private javax.swing.JList<Actor> lsAllActors;
    private javax.swing.JList<Director> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfActor;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfExpectedDate;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPosterPath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            hideErrors();
            initRepository();
            initActors();
            initDirectors();
            initGenres();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() throws Exception {
        actorRepository = RepositoryFactory.getActorRepository();
        directorRepository = RepositoryFactory.getDirectorRepository();
        genreRepository = RepositoryFactory.getGenreRepository();
        movieRepository = RepositoryFactory.getMovieRepository();
    }

    private void initValidation() {
        validationFields.put(tfTitle, lbTitleError);
        validationFields.put(tfOriginalTitle, lbOriginalTitleError);
        validationFields.put(tfLink, lbLinkError);
        validationFields.put(tfDuration, lbDurationError);
        validationFields.put(tfPublishedDate, lbPublishedDateError);
        validationFields.put(tfExpectedDate, lbExpectedDateError);
        validationFields.put(tfPosterPath, lbPosterPathError);
        validationFields.put(taDescription, lbDescriptionError);
        validationLists.put(genreModel, lbGenreError);
        validationLists.put(directorModel, lbDirectorsError);
        validationLists.put(actorModel, lbActorsError);
    }

    private void initActors() throws Exception {
        allActors = actorRepository.selectAllActors();
        allActorsSet.addAll(allActors);
        loadAllActorsModel();
    }

    private void initDirectors() throws Exception {
        cbDirectors.removeAllItems();
        allDirectors = directorRepository.selectAllDirectors();
        allDirectorsSet.addAll(allDirectors);
        for (Director d : allDirectors) {
            cbDirectors.addItem(new Director(d.getIdDirector(), d.getDirectorName()));
        }
    }

    private void initGenres() throws Exception {
        allGenres = genreRepository.selectAllGenres();
        for (Genre g : allGenres) {
            cbGenres.addItem(new Genre(g.getIdGenre(), g.getGenreName()));
        }
    }

    private void setIcon(JLabel lbPoster, File file) {
        try {
            lbPoster.setIcon(IconUtils.createIcon(file, lbPoster.getWidth(), lbPoster.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private String copyImageToAssets(Movie m, String pictureUrl) throws IOException {
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));
        if (ext.length() > 4) {
            ext = EXT;
        }
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(pictureUrl, localPicturePath);
        m.setPosterPath(localPicturePath);
        return localPicturePath;
    }

    private boolean formValid() {
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> entry : validationFields.entrySet()) {
            JTextComponent textField = entry.getKey();
            JLabel errorLabel = entry.getValue();

            String text = textField.getText().trim();
            boolean isValid = !text.isEmpty();

            if ("PublishedDate".equals(textField.getName())) {
                try {
                    LocalDateTime.parse(text, Movie.DATE_FORMATTER);
                    isValid = true;
                } catch (Exception e) {
                    isValid = false;
                }
            }

            if ("ExpectedDate".equals(textField.getName())) {
                try {
                    LocalDate.parse(text, Movie.DATE_FORMAT);
                    isValid = true;
                } catch (Exception e) {
                    isValid = false;
                }
            }

            ok &= isValid;
            errorLabel.setVisible(!isValid);
        }
        for (Map.Entry<DefaultListModel, JLabel> entry : validationLists.entrySet()) {
            DefaultListModel list = entry.getKey();
            JLabel errorLabel = entry.getValue();
            boolean isValid = !list.isEmpty();
            ok &= isValid;
            errorLabel.setVisible(!isValid);
        }

        return ok;
    }

    private void clearForm() {
        hideErrors();
        actorsRelatedToMovie.clear();
        genresRelatedToMovie.clear();
        directorsRelatedToMovie.clear();
        actorModel.clear();
        genreModel.clear();
        directorModel.clear();
        for (Map.Entry<JTextComponent, JLabel> entry : validationFields.entrySet()) {
            JTextComponent textField = entry.getKey();
            textField.setText("");
        }
        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
    }

    private void hideErrors() {
        for (Map.Entry<JTextComponent, JLabel> entry : validationFields.entrySet()) {
            JLabel errorLabel = entry.getValue();
            errorLabel.setVisible(false);
        }
        for (Map.Entry<DefaultListModel, JLabel> entry : validationLists.entrySet()) {
            JLabel errorLabel = entry.getValue();
            errorLabel.setVisible(false);
        }
    }

    private void initDragNDrop() {
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportTransferHandler());

        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ImportTransferHandler());
    }

    private void loadAllActorsModel() {
        allActorsModel.clear();
        allActors.forEach(allActorsModel::addElement);
        lsAllActors.setModel(allActorsModel);
        tfActor.setText("");
    }

    private void loadActorsModel() {
        actorModel.clear();
        actorsToDrop.forEach(actorModel::addElement);
        lsActors.setModel(actorModel);
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(lsAllActors.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (actorsToDrop.add(add)) {
                    loadActorsModel();
                    actorsRelatedToMovie.add(add);
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    @Override
    public boolean addActor(Actor actor) {
        if (allActorsSet.add(actor)) {
            try {
                actorRepository.createNewActor(actor.getActorName());
                initActors();
            } catch (Exception ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    @Override
    public boolean addDirector(Director director) {
        if (allDirectorsSet.add(director)) {
            try {
                directorRepository.createNewDirector(director.getDirectorName());
                initDirectors();
            } catch (Exception ex) {
                Logger.getLogger(AddMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }
}
